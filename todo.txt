----- Version 1 -----
X Review and comment GUI.py
X Remove personal data from Github and figure out how to "initialize" data at start (perhaps a welcome message?)
X Cleanup GUI appearance
    x Make dropdown functionality more evident
    x The 'Submit' button should stay in place when expenses are added
    x The expenses should be in a seperate scrollbar box
        x Convert listbox into Treeview object
        x Reevaluate the 'Delete Selected' button
        x Add comments to all changes
    x Cleanup Expense Form
        x Put 'Expense Type' option on top of other options
        x Add horizontal spacing
        x Comment changes
X Add title to expense form and budget data
X Create GUI folder and create 'fonts.py' file 
X Format 'Value' data so it displays with two decimal places and add $ sign
X Change font of 'delete' and 'submit' button so they stand out more
X Change 'mouseover' color scheme to match for buttons and dropdowns
X Replace main title with 'Expenses' title 
X Change top title frame to make it fit in the middle column
X Add buffer to the bottom of titles
X Change window title to reflect payperiod date after every change in payperiod
X Show the payperiod date in the left hand column
X Allow user to set planned budget goals 
X Come up with a better repo name
X Package into first version release (i.e. Create frozen binary)
X Update README to really reflect the overarching vision behind this project
X Model database tables on paper
X Research how to use 'sqlite3'
X Fix bdates.py file so that it is using the month instead of the payperiod
X Implement data.py file as replacement for bdata.py
X Break data.py down into an Object-Oriented model. This will allow for better
  organization.
X Remodel payperiod.py file
X Add table to SQLite that will handle Budget information.
X Make sure that there is a method to retrieve budget data.
X Locate and restore Exp_Attrs
X Comment out README. Under construction. 
X Change the name of the repo.
X Give the user the option to go back to a prior month.
X Force user to enter in Limits when a new database is created.
X Cleanup main.py code 
X Refactor GUI files
X Change the drop-down option for the 'Expense Type' to pull from the SQL 
  database.
X Add MONTH constant and put current month in title bar.
X Cleanup 'debug' code and make sure that production DB works as expected.
X Comment all changes and merge in Monthly branch
* Activate 'date' column of each expense that is submitted. 
* Maybe set all other expense types to have 'ALL' as a parent and then use this
  to control which limits are deducted when expenses are added.
* Update the README.
* Add TODO section of README for most current todo list items
* Update the first release. (windows will not be included)
* Find a way to make the program installable via 'sudo apt-get'
* Get some kind of feedback loop started.
* Get a few customers on board.

=== MONTHLY BUDGET UPDATE ===
* The database and save+restore model are the epicenter of my budget program


----- Version 2 -----
* Change PayPeriod object to Paycheck object. This is more appropriate. 
* Investigate the competition
* Add TODO section to the README
* Add date column to the 'Expense List'
* Allow the user to sort the columns of the 'Expense List'
* Migrate all buffer frame setups to the 'style.py' file
* Change payperiod classes so they force keyword arguments
* Change PayCheck var in 'payperiod.py' to use Money class.
* Color-code the 'Remaining Limit' row in the data column.
* Change base class so that it inherits from tk.Frame
* Allow user to specify where data will be stored
* Turn any method in the main GUI class that has its own embedded functions
  into a class and potentially move to its own file.
* Reassess the names of all GUI methods (should they have an underscore 
  prefacing their names?)
* Add option to delete an entire Pay-Period
* Clean up 'Budget Data' and seperate it into columns
* Add 'Preferences' dropdown which will allow the user to customize things
  such as which 'Expense Types' are relevant to him/her.
* Find Graphic Logo for program


----- Someday/Maybe Features ------
* Matplotlib pie chart statistics
* Provide the user advice on when they should split one of their common entries
  into a brand new category. (You should advice customers to be precise with 
  the 'Notes' section of their entries)
* If the user is overdue on certain categories, the category should flash red and get bolder
* Show user where he needs work, based on previous pay-periods. Maybe even 
  offer user links to articles that could help him lower his expenses in his 
  problemed categories.
* Make monthly bills budget automatically.
* Add quote of the day about money!
* Add Savings tracker. It will be just like the one you use for college, 
  updatable on a monthly basis. 
* Add '$$$ Awareness Meeter.' You would need to give the user an option to
  mark pay-period as 'Completed' or 'Not Completed'
